import @std/print.cpoint
import @std/process.cpoint
import @std/panic.cpoint

extern snprintf(s : i8 ptr, n : int, format : i8 ptr ...);
extern strlen(s : i8 ptr) i64;
extern strcmp(s : i8 ptr, s2 : i8 ptr) int;

// will be useful when . will be an operator
struct cc {
    var flags : i8 ptr
    var filename : i8 ptr
    func cc(){
        self.flags = " "
        self.filename = " "
    }
    func compile() void {
        if strcmp(self.filename, " ") == 0 {
            #panic("No file given to cc")
        }
        return void
    }
}

mod cc {
    func cc(path : i8 ptr){
        var cmd : i8 ptr = gc_malloc((4096 + 4) * sizeof i8)
        snprintf(cmd, 4096 + 4, "cc %s", path)
        process::create(cmd)
    }
    func cc_flags(path : i8 ptr, flags : i8 ptr){
        var cmd : i8 ptr = gc_malloc((4096 + 5 + strlen(flags)) * sizeof i8)
        snprintf(cmd, 4096 + 4, "cc %s %s", flags, path)
        process::create(cmd)
    }
}
